<?php

/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/ParserClassName.php
 */

namespace Rasteiner\KQLParser;

/**
 * Default exception for syntax errors.
 */
class SyntaxException extends \Exception {}

/**
 * `yy` is a storage which semantic actions may use to
 * store needed intermediate results or state, which can be
 * accessed accross semantic actions, and in the tokenizer.
 *
 * It also exposes access to the tokenizer, so semantic actions
 * can change its state.
 */
final class yy {
  /**
   * Tokenizer instance.
   */
  public static $tokenizer = null;

  /**
   * Alias of the tokenizer instance.
   */
  public static $lexer = null;

  /**
   * User-level storage.
   */
  private static $storage = array();

  public function set($name, $value) {
    self::$storage[$name] = $value;
  }

  public function get($name) {
    return self::$storage[$name];
  }
}

require 'ast.php';

/**
 * Base class for all generated LR parsers.
 */
class yyparse {

  /**
   * Productions table (generated by Syntax tool).
   *
   * Format of a row:
   *
   * [ <NonTerminal Index>, <RHS.length>, <semanticActionName> ]
   */
  private static $productions = [[-1,1,'_handler1'],
[0,1,'_handler2'],
[0,3,'_handler3'],
[1,1,'_handler4'],
[1,3,'_handler5'],
[1,3,'_handler6'],
[1,4,'_handler7'],
[2,1,'_handler8'],
[2,1,'_handler9'],
[2,3,'_handler10'],
[3,1,'_handler11'],
[3,3,'_handler12'],
[4,1,'_handler13'],
[4,1,'_handler14'],
[4,1,'_handler15'],
[5,1,'_handler16'],
[5,1,'_handler17'],
[5,1,'_handler18'],
[5,1,'_handler19'],
[5,1,'_handler20'],
[5,3,'_handler21']];

  /**
   * Tokens map (from token type to encoded index, autogenerated).
   */
  private static $tokens = array('COALESCE' => "6", '.' => "7", '(' => "8", ')' => "9", 'SYMBOL' => "10", ',' => "11", 'STRING' => "12", 'NUMBER' => "13", 'TRUE' => "14", 'FALSE' => "15", 'NULL' => "16", '[' => "17", ']' => "18", '$' => "19");

  /**
   * Parsing table (generated by Syntax tool).
   */
  private static $table = array(array('0' => 1, '1' => 2, '2' => 3, '5' => 5, '8' => "s6", '10' => "s4", '12' => "s7", '13' => "s8", '14' => "s9", '15' => "s10", '16' => "s11", '17' => "s12"), array('6' => "s13", '19' => "acc"), array('6' => "r1", '7' => "s15", '8' => "s16", '9' => "r1", '11' => "r1", '18' => "r1", '19' => "r1"), array('6' => "r3", '7' => "r3", '8' => "r3", '9' => "r3", '11' => "r3", '18' => "r3", '19' => "r3"), array('6' => "r7", '7' => "r7", '8' => "r7", '9' => "r7", '11' => "r7", '18' => "r7", '19' => "r7"), array('6' => "r8", '7' => "r8", '8' => "r8", '9' => "r8", '11' => "r8", '18' => "r8", '19' => "r8"), array('0' => 18, '1' => 2, '2' => 3, '5' => 5, '8' => "s6", '10' => "s4", '12' => "s7", '13' => "s8", '14' => "s9", '15' => "s10", '16' => "s11", '17' => "s12"), array('6' => "r15", '7' => "r15", '8' => "r15", '9' => "r15", '11' => "r15", '18' => "r15", '19' => "r15"), array('6' => "r16", '7' => "r16", '8' => "r16", '9' => "r16", '11' => "r16", '18' => "r16", '19' => "r16"), array('6' => "r17", '7' => "r17", '8' => "r17", '9' => "r17", '11' => "r17", '18' => "r17", '19' => "r17"), array('6' => "r18", '7' => "r18", '8' => "r18", '9' => "r18", '11' => "r18", '18' => "r18", '19' => "r18"), array('6' => "r19", '7' => "r19", '8' => "r19", '9' => "r19", '11' => "r19", '18' => "r19", '19' => "r19"), array('0' => 23, '1' => 2, '2' => 3, '3' => 29, '4' => 22, '5' => 25, '8' => "s6", '10' => "s24", '12' => "s7", '13' => "s8", '14' => "s9", '15' => "s10", '16' => "s11", '17' => "s12"), array('1' => 14, '2' => 3, '5' => 5, '8' => "s6", '10' => "s4", '12' => "s7", '13' => "s8", '14' => "s9", '15' => "s10", '16' => "s11", '17' => "s12"), array('6' => "r2", '7' => "s15", '8' => "s16", '9' => "r2", '11' => "r2", '18' => "r2", '19' => "r2"), array('2' => 17, '5' => 5, '8' => "s6", '10' => "s4", '12' => "s7", '13' => "s8", '14' => "s9", '15' => "s10", '16' => "s11", '17' => "s12"), array('0' => 23, '1' => 2, '2' => 3, '3' => 21, '4' => 22, '5' => 25, '8' => "s6", '9' => "s20", '10' => "s24", '12' => "s7", '13' => "s8", '14' => "s9", '15' => "s10", '16' => "s11", '17' => "s12"), array('6' => "r4", '7' => "r4", '8' => "r4", '9' => "r4", '11' => "r4", '18' => "r4", '19' => "r4"), array('6' => "s13", '9' => "s19"), array('6' => "r9", '7' => "r9", '8' => "r9", '9' => "r9", '11' => "r9", '18' => "r9", '19' => "r9"), array('6' => "r5", '7' => "r5", '8' => "r5", '9' => "r5", '11' => "r5", '18' => "r5", '19' => "r5"), array('9' => "s26", '11' => "s27"), array('9' => "r10", '11' => "r10", '18' => "r10"), array('6' => "s13", '9' => "r12", '11' => "r12", '18' => "r12"), array('6' => "r7", '7' => "r7", '8' => "r7", '9' => "r13/r7", '11' => "r13/r7", '18' => "r13/r7"), array('6' => "r8", '7' => "r8", '8' => "r8", '9' => "r14/r8", '11' => "r14/r8", '18' => "r14/r8"), array('6' => "r6", '7' => "r6", '8' => "r6", '9' => "r6", '11' => "r6", '18' => "r6", '19' => "r6"), array('0' => 23, '1' => 2, '2' => 3, '4' => 28, '5' => 25, '8' => "s6", '10' => "s24", '12' => "s7", '13' => "s8", '14' => "s9", '15' => "s10", '16' => "s11", '17' => "s12"), array('9' => "r11", '11' => "r11", '18' => "r11"), array('11' => "s27", '18' => "s30"), array('6' => "r20", '7' => "r20", '8' => "r20", '9' => "r20", '11' => "r20", '18' => "r20", '19' => "r20"));

  /**
   * Parsing stack.
   */
  private static $stack = [];

  /**
   * Result of a semantic action (used as `$$`).
   */
  private static $__ = null;

  /**
   * Result location (used as `@$`).
   */
  private static $__loc = null;

  /**
   * Parser event callbacks.
   */
  private static $on_parse_begin = null;
  private static $on_parse_end = null;

  /**
   * Matched token text.
   */
  public static $yytext = '';

  /**
   * Matched token length.
   */
  public static $yyleng = 0;

  /**
   * End of file symbol.
   */
  const EOF = '$';

  /**
   * Tokenizer instance.
   */
  private static $tokenizer = null;

  private static function _handler1($_1) {
yyparse::$__ = $_1;
}

private static function _handler2($_1) {
yyparse::$__ = $_1;
}

private static function _handler3($_1,$_2,$_3) {
yyparse::$__ = new NullCoalesceNode($_1, $_3);
}

private static function _handler4($_1) {
yyparse::$__ = $_1;
}

private static function _handler5($_1,$_2,$_3) {
yyparse::$__ = new AccessNode($_1, $_3);
}

private static function _handler6($_1,$_2,$_3) {
yyparse::$__ = new MethodNode($_1, []);
}

private static function _handler7($_1,$_2,$_3,$_4) {
yyparse::$__ = new MethodNode($_1, $_3);
}

private static function _handler8($_1) {
yyparse::$__ = new SymbolNode($_1);
}

private static function _handler9($_1) {
yyparse::$__ = $_1;
}

private static function _handler10($_1,$_2,$_3) {
yyparse::$__ = $_2;
}

private static function _handler11($_1) {
yyparse::$__ = [$_1];
}

private static function _handler12($_1,$_2,$_3) {
$_1[] = $_3; yyparse::$__ = $_1;
}

private static function _handler13($_1) {
yyparse::$__ = $_1;
}

private static function _handler14($_1) {
yyparse::$__ = new SymbolNode($_1);
}

private static function _handler15($_1) {
yyparse::$__ = $_1;
}

private static function _handler16($_1) {
yyparse::$__ = new ValueNode($_1);
}

private static function _handler17($_1) {
yyparse::$__ = new ValueNode(floatval($_1));
}

private static function _handler18($_1) {
yyparse::$__ = new ValueNode(true);
}

private static function _handler19($_1) {
yyparse::$__ = new ValueNode(false);
}

private static function _handler20($_1) {
yyparse::$__ = new ValueNode(null);
}

private static function _handler21($_1,$_2,$_3) {
yyparse::$__ = $_2;
}

  private static $shouldCaptureLocations = false;

  private static function yyloc($start, $end) {
    // Epsilon doesn't produce location.
    if (!$start || !$end) {
      return !$start ? $end : $static;
    }

    return array(
      'startOffset' => $start['startOffset'],
      'endOffset' => $end['endOffset'],
      'startLine' => $start['startLine'],
      'endLine' => $end['endLine'],
      'startColumn' => $start['startColumn'],
      'endColumn' => $end['endColumn'],
    );
  }

  public static function setTokenizer($tokenizer) {
    self::$tokenizer = $tokenizer;

    // Also set it on `yy` so semantic actions can access the tokenizer.
    yy::$tokenizer = $tokenizer;
    yy::$lexer = $tokenizer;
  }

  public static function getTokenizer() {
    return self::$tokenizer;
  }

  public static function setOnParseBegin($on_parse_begin) {
    self::$on_parse_begin = $on_parse_begin;
  }

  public static function setOnParseEnd($on_parse_end) {
    self::$on_parse_end = $on_parse_end;
  }

  public static function parse($string) {
    if (self::$on_parse_begin) {
      $on_parse_begin = self::$on_parse_begin;
      $on_parse_begin($string);
    }

    $tokenizer = self::getTokenizer();

    if (!$tokenizer) {
      throw new SyntaxException(`Tokenizer is not provided.`);
    }

    $tokenizer->initString($string);

    $stack = &self::$stack;
    $stack = ['0'];

    $tokens = &self::$tokens;
    $table = &self::$table;
    $productions = &self::$productions;

    $token = $tokenizer->getNextToken();
    $shifted_token = null;

    do {
      if (!$token) {
        self::unexpectedEndOfInput();
      }

      $state = end($stack);
      $column = $tokens[$token['type']];

      if (!isset($table[$state][$column])) {
        self::unexpectedToken($token);
      }
      $entry = $table[$state][$column];

      if ($entry[0] === 's') {
        $loc = null;

        if (self::$shouldCaptureLocations) {
          $loc = array(
            'startOffset' => $token['startOffset'],
            'endOffset'=> $token['endOffset'],
            'startLine' => $token['startLine'],
            'endLine' => $token['endLine'],
            'startColumn' => $token['startColumn'],
            'endColumn' => $token['endColumn'],
          );
        }

        array_push(
          $stack,
          array(
            'symbol' => $tokens[$token['type']],
            'semanticValue' => $token['value'],
            'loc' => $loc,
          ),
          intval(substr($entry, 1))
        );
        $shifted_token = $token;
        $token = $tokenizer->getNextToken();
      } else if ($entry[0] === 'r') {
        $production_number = intval(substr($entry, 1));
        $production = $productions[$production_number];
        $has_semantic_action = count($production) > 2;
        $semantic_value_args = $has_semantic_action ? [] : null;

        $location_args = (
          $has_semantic_action && self::$shouldCaptureLocations
            ? []
            : null
        );

        if ($production[1] !== 0) {
          $rhs_length = $production[1];
          while ($rhs_length-- > 0) {
            array_pop($stack);
            $stack_entry = array_pop($stack);

            if ($has_semantic_action) {
              array_unshift(
                $semantic_value_args,
                $stack_entry['semanticValue']
              );

              if ($location_args !== null) {
                array_unshift(
                  $location_args,
                  $stack_entry['loc']
                );
              }
            }
          }
        }

        $reduce_stack_entry = array('symbol' => $production[0]);

        if ($has_semantic_action) {
          self::$yytext = $shifted_token ? $shifted_token['value'] : null;
          self::$yyleng = $shifted_token ? strlen($shifted_token['value']) : null;

          forward_static_call_array(
            array('self', $production[2]),
            $location_args !== null
              ? array_merge($semantic_value_args, $location_args)
              : $semantic_value_args
          );

          $reduce_stack_entry['semanticValue'] = self::$__;

          if ($location_args !== null) {
            $reduce_stack_entry['loc'] = self::$__loc;
          }
        }

        $next_state = end($stack);
        $symbol_to_reduce_with = $production[0];

        array_push(
          $stack,
          $reduce_stack_entry,
          $table[$next_state][$symbol_to_reduce_with]
        );
      } else if ($entry === 'acc') {
        array_pop($stack);
        $parsed = array_pop($stack);

        if (count($stack) !== 1 ||
            $stack[0] !== '0' ||
            $tokenizer->hasMoreTokens()) {
          self::unexpectedToken($token);
        }

        $parsed_value = array_key_exists('semanticValue', $parsed)
          ? $parsed['semanticValue']
          : true;

        if (self::$on_parse_end) {
          $on_parse_end = self::$on_parse_end;
          $on_parse_end($parsed_value);
        }

        return $parsed_value;
      }

    } while ($tokenizer->hasMoreTokens() || count($stack) > 1);
  }

  private static function unexpectedToken($token) {
    if ($token['type'] === self::EOF) {
      self::unexpectedEndOfInput();
    }

    self::getTokenizer()->throwUnexpectedToken(
      $token['value'],
      $token['startLine'],
      $token['startColumn']
    );
  }

  private static function unexpectedEndOfInput() {
    self::parseError('Unexpected end of input.');
  }

  private static function parseError($message) {
    throw new SyntaxException('SyntaxError: ' . $message);
  }
}


/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

class Tokenizer {
  private static $lexRules = [['/^\s+/i', '_lex_rule1'],
['/^true\b/i', '_lex_rule2'],
['/^false\b/i', '_lex_rule3'],
['/^null\b/i', '_lex_rule4'],
['/^[a-z_][0-9a-z_]*/i', '_lex_rule5'],
['/^\./i', '_lex_rule6'],
['/^\?\?/i', '_lex_rule7'],
['/^-?(?:[1-9][0-9]+|[0-9])(?:\.[0-9]+)?(?:[eE][-+]?[0-9]+)?\b/i', '_lex_rule8'],
['/^"(?:[^"\\\\]++|\\\\.)*+"/i', '_lex_rule9'],
['/^\'(?:[^\'\\\\]++|\\\\.)*+\'/i', '_lex_rule10'],
['/^\[/i', '_lex_rule11'],
['/^\]/i', '_lex_rule12'],
['/^\(/i', '_lex_rule13'],
['/^\)/i', '_lex_rule14'],
['/^,/i', '_lex_rule15']];
  private static $lexRulesByConditions = array('INITIAL' => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14));

  private $states = array();
  private $string = '';
  private $stringLen = 0;
  private $cursor = 0;
  private $tokensQueue = array();

  /**
   * Line-based location tracking.
   */
  private $currentLine = 1;
  private $currentColumn = 0;
  private $currentLineBeginOffset = 0;

  /**
   * Location data of a matched token.
   */
  private $tokenStartOffset = 0;
  private $tokenEndOffset = 0;
  private $tokenStartLine = 0;
  private $tokenEndLine = 0;
  private $tokenStartColumn = 0;
  private $tokenEndColumn = 0;

  private static $EOF_TOKEN = array(
    'type' => yyparse::EOF,
    'value' => '',
  );

  private function _lex_rule1() {
/* skip whitespace */;
}

private function _lex_rule2() {
return 'TRUE';
}

private function _lex_rule3() {
return 'FALSE';
}

private function _lex_rule4() {
return 'NULL';
}

private function _lex_rule5() {
return 'SYMBOL';
}

private function _lex_rule6() {
return '.';
}

private function _lex_rule7() {
return 'COALESCE';
}

private function _lex_rule8() {
return 'NUMBER';;
}

private function _lex_rule9() {
yyparse::$yytext = stripcslashes(substr(yyparse::$yytext, 1, -1)); return 'STRING';;
}

private function _lex_rule10() {
yyparse::$yytext = substr(yyparse::$yytext, 1, -1); return 'STRING';;
}

private function _lex_rule11() {
return '[';
}

private function _lex_rule12() {
return ']';
}

private function _lex_rule13() {
return '(';
}

private function _lex_rule14() {
return ')';
}

private function _lex_rule15() {
return ',';
}

  public function initString($string) {
    $this->string = $string;
    $this->stringLen = strlen($this->string);
    $this->cursor = 0;
    $this->states = array('INITIAL');
    $this->tokensQueue = array();

    $this->currentLine = 1;
    $this->currentColumn = 0;
    $this->currentLineBeginOffset = 0;

    /**
     * Location data of a matched token.
     */
    $this->tokenStartOffset = 0;
    $this->tokenEndOffset = 0;
    $this->tokenStartLine = 0;
    $this->tokenEndLine = 0;
    $this->tokenStartColumn = 0;
    $this->tokenEndColumn = 0;
  }

  public function getStates() {
    return $this->states;
  }

  public function getCurrentState() {
    return $this->states[count($this->states) - 1];
  }

  public function pushState($state) {
    $this->states[] = $state;
  }

  public function begin($state) {
    $this->pushState(state);
  }

  public function popState() {
    if (count($this->states) > 1) {
      return array_pop($this->states);
    }
    return $this->states[0];
  }

  public function getNextToken() {
    if (count($this->tokensQueue) > 0) {
      return $this->toToken(array_shift($this->tokensQueue));
    }

    if (!$this->hasMoreTokens()) {
      return self::$EOF_TOKEN;
    }

    $string = substr($this->string, $this->cursor);
    $lexRulesForState = static::$lexRulesByConditions[$this->getCurrentState()];

    foreach ($lexRulesForState as $lex_rule_index) {
      $lex_rule = self::$lexRules[$lex_rule_index];

      $matched = $this->match($string, $lex_rule[0]);

      // Manual handling of EOF token (the end of string). Return it
      // as `EOF` symbol.
      if (!$string && $matched === '') {
        $this->cursor++;
      }

      if ($matched !== null) {
        yyparse::$yytext = $matched;
        yyparse::$yyleng = strlen($matched);
        $token = call_user_func(array($this, $lex_rule[1]));
        if (!$token) {
          return $this->getNextToken();
        }

        // If multiple tokens are returned, save them to return
        // on next `getNextToken` call.
        if (is_array($token)) {
          $tokens_to_queue = array_slice($token, 1);
          $token = $token[0];
          if (count($tokens_to_queue) > 0) {
            array_unshift($this->tokensQueue, ...$tokens_to_queue);
          }
        }

        return $this->toToken($token, yyparse::$yytext);
      }
    }

    if ($this->isEOF()) {
      $this->cursor++;
      return self::$EOF_TOKEN;
    }

    $this->throwUnexpectedToken(
      $string[0],
      $this->currentLine,
      $this->currentColumn
    );
  }

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  public function throwUnexpectedToken($symbol, $line, $column) {
    $line_source = explode("\n", $this->string)[$line - 1];

    $pad = str_repeat(' ', $column);
    $line_data = "\n\n" . $line_source . "\n" . $pad . "^\n";

    throw new SyntaxException(
      $line_data . 'Unexpected token: "' . $symbol . '" at ' .
      $line . ':' . $column . '.'
    );
  }

  private function captureLocation($matched) {
    // Absolute offsets.
    $this->tokenStartOffset = $this->cursor;

    // Line-based locations, start.
    $this->tokenStartLine = $this->currentLine;
    $this->tokenStartColumn = $this->tokenStartOffset - $this->currentLineBeginOffset;

    // Extract `\n` in the matched token.
    preg_match_all('/\n/', $matched, $nl_matches, PREG_OFFSET_CAPTURE);
    $nl_match = $nl_matches[0];

    if (count($nl_match) > 0) {
      foreach ($nl_match as $nl_match_data) {
        $this->currentLine++;
        // Offset is at index 1.
        $this->currentLineBeginOffset = $this->tokenStartOffset +
          $nl_match_data[1] + 1;
      }
    }

    $this->tokenEndOffset = $this->cursor + strlen($matched);

    // Line-based locations, end.
    $this->tokenEndLine = $this->currentLine;
    $this->tokenEndColumn = $this->currentColumn =
      ($this->tokenEndOffset - $this->currentLineBeginOffset);
  }

  private function toToken($token, $yytext = '') {
    return array(
      'type' => $token,
      'value' => $yytext,
      'startOffset' => $this->tokenStartOffset,
      'endOffset' => $this->tokenEndOffset,
      'startLine' => $this->tokenStartLine,
      'endLine' => $this->tokenEndLine,
      'startColumn' => $this->tokenStartColumn,
      'endColumn' => $this->tokenEndColumn,
    );
  }

  public function isEOF() {
    return $this->cursor == $this->stringLen;
  }

  public function hasMoreTokens() {
    return $this->cursor <= $this->stringLen;
  }

  private function match($string, $regexp) {
    preg_match($regexp, $string, $matches);
    if (count($matches) > 0) {
      $matched = $matches[0];
      $this->captureLocation($matched);
      $this->cursor += strlen($matched);
      return $matched;
    }
    return null;
  }
}

yyparse::setTokenizer(new Tokenizer());


class Parser extends yyparse {}
